•  La interacción usuario-navegador es, básicamente, la siguiente: 
– A. El usuario indica la dirección del recurso al que quiere acceder. 
– B. El navegador visualiza el recurso en la pantalla del usuario.


 •  Cada navegador web tiene una forma de interpretar esta interacción y puede centrarse más en: 
– Ofrecer una respuesta rápida 
– Mostrar una respuesta más fiel al contenido del recurso 
– Priorizar los aspectos de seguridad en las comunicaciones
 – … 


• Cada navegador, por tanto, está formado por una serie de elementos y componentes que conforman su arquitectura, aunque todas parten de una arquitectura de referencia básica y común a todos los navegadores.


La arquitectura de ejecución:


La arquitectura de ejecución se trata del modelo a seguir que usan en su gran mayoría las páginas web y aplicaciones web para usarse. En él destacan dos partes, una denominada front-end (En la cual se ejecuta el código a nivel de cliente) y el back-end (En el cual se ejecuta el código a nivel servidor).


En un modelo convencional el front-end es cargado mediante el uso de tecnologías de hipertexto como HTML, que tendrá a su vez asociado código CSS y JavaScript, que usando tecnologías como node, Java, Angular, AJAX…harán peticiones al servidor que responderá con sus propias apis y para enviar respuestas en formato JSON.


En un modelo de web app la mayor parte del código se ejecuta a nivel cliente.


Resumen lenguajes:


JavaScript: JavaScript (abreviado comúnmente JS) es un lenguaje de programación interpretado, dialecto del estándar ECMAScript. Se define como orientado a objetos,2​ basado en prototipos, imperativo, débilmente tipado y dinámico. Se utiliza principalmente del lado del cliente, implementado como parte de un navegador web permitiendo mejoras en la interfaz de usuario y páginas web dinámicas3​ y JavaScript del lado del servidor (Server-side JavaScript o SSJS). Su uso en aplicaciones externas a la web, por ejemplo en documentos PDF, aplicaciones de escritorio (mayoritariamente widgets) es también significativo.


React: React te ayuda a crear interfaces de usuario interactivas de forma sencilla. Diseña vistas simples para cada estado en tu aplicación  y react se encargará de actualizar y renderizar de manera eficiente los componentes correctos cuando los datos cambien.


Angular: Angular es un Framework de JavaScript de código abierto escrito en TypeScript. Su objetivo principal es desarrollar aplicaciones de una sola página. 
Google se encarga del mantenimiento y constantes actualizaciones de mejoras para este framework.